
```tsx
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, XCircle } from 'lucide-react';

const MarketingPretest = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);
  const [answers, setAnswers] = useState({});

  const questions = [
    {
      category: "Growth Strategy",
      question: "Which metric is most appropriate for measuring product-market fit?",
      options: [
        "Net Promoter Score (NPS)",
        "Customer Acquisition Cost (CAC)",
        "40% of users would be 'very disappointed' if the product disappeared",
        "Monthly Recurring Revenue (MRR)"
      ],
      correct: 2,
      explanation: "The '40% rule' developed by Sean Ellis is a widely accepted benchmark for product-market fit, indicating strong user need for your product."
    },
    {
      category: "Lead Generation",
      question: "What is the primary difference between MQLs and SQLs?",
      options: [
        "MQLs are more valuable than SQLs",
        "SQLs have shown buying intent while MQLs fit ideal customer profile",
        "MQLs are ready to purchase while SQLs need nurturing",
        "SQLs are automated while MQLs require manual qualification"
      ],
      correct: 1,
      explanation: "Marketing Qualified Leads (MQLs) match your target audience criteria, while Sales Qualified Leads (SQLs) have demonstrated specific purchase intent."
    },
    {
      category: "Conversion Rate Optimization",
      question: "What is the recommended minimum sample size for A/B testing to achieve statistical significance?",
      options: [
        "100 conversions per variation",
        "1000 total visitors",
        "50 conversions total",
        "10,000 total visitors"
      ],
      correct: 0,
      explanation: "Generally, you need at least 100 conversions per variation to achieve statistical significance in A/B testing."
    },
    {
      category: "Digital Marketing",
      question: "Which attribution model gives equal credit to all touchpoints in a conversion path?",
      options: [
        "First-touch attribution",
        "Last-touch attribution",
        "Linear attribution",
        "Time decay attribution"
      ],
      correct: 2,
      explanation: "Linear attribution distributes credit equally across all touchpoints in the customer journey."
    },
    {
      category: "Customer Acquisition",
      question: "What is a good benchmark for CAC:LTV ratio in SaaS?",
      options: [
        "1:1",
        "1:2",
        "1:3",
        "1:5"
      ],
      correct: 2,
      explanation: "A healthy CAC:LTV ratio is typically 1:3 or better, meaning the customer's lifetime value should be at least 3 times the cost to acquire them."
    }
  ];

  const handleAnswer = (answerIndex) => {
    const newAnswers = { ...answers, [currentQuestion]: answerIndex };
    setAnswers(newAnswers);
    
    if (answerIndex === questions[currentQuestion].correct) {
      setScore(score + 1);
    }
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setShowResults(false);
    setScore(0);
    setAnswers({});
  };

  if (showResults) {
    return (
      <Card className="w-full max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle>Test Results</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="text-2xl font-bold text-center mb-6">
              Your Score: {score}/{questions.length} ({Math.round((score/questions.length) * 100)}%)
            </div>
            {questions.map((q, index) => (
              <div key={index} className="border rounded-lg p-4">
                <div className="font-semibold text-lg mb-2">{q.category}</div>
                <div className="mb-2">{q.question}</div>
                <div className="flex items-center gap-2">
                  {answers[index] === q.correct ? (
                    <CheckCircle className="text-green-500" />
                  ) : (
                    <XCircle className="text-red-500" />
                  )}
                  <div>
                    Correct answer: {q.options[q.correct]}
                  </div>
                </div>
                <div className="mt-2 text-sm text-gray-600">
                  {q.explanation}
                </div>
              </div>
            ))}
            <Button 
              onClick={resetQuiz}
              className="w-full mt-4"
            >
              Retake Test
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  const currentQ = questions[currentQuestion];

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Marketing Certification Pretest</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex justify-between items-center mb-4">
            <div className="text-sm text-gray-600">
              Question {currentQuestion + 1} of {questions.length}
            </div>
            <div className="text-sm font-medium">
              {currentQ.category}
            </div>
          </div>
          
          <div className="text-lg font-medium mb-4">
            {currentQ.question}
          </div>
          
          <div className="space-y-2">
            {currentQ.options.map((option, index) => (
              <Button
                key={index}
                onClick={() => handleAnswer(index)}
                className="w-full justify-start text-left h-auto py-3 px-4"
                variant="outline"
              >
                {option}
              </Button>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
